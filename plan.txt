Google Custom Search API – project & keys, first Postman test	Set up a Google Programmable Search Engine (CSE) that indexes the full web and generate an API key. Use Postman to send a basic request to the Custom Search JSON API and verify that the response includes valid search results in JSON format. This is the foundation of the project.
Query design & domain exclusion operators; draft code snippet	Learn how to use advanced Google search operators to exclude specific domains (e.g., sap.com, example.org) from search results. Create a Groovy or JavaScript function that constructs a valid query string combining keywords with exclusion logic. The function should return a list of the top 10 search results for a given keyword.
CAP file‑upload endpoint + parse CSV/XLSX	Build a CAP endpoint that allows uploading of a CSV or XLSX file containing keywords and domains to exclude. Parse the uploaded file and persist the contents in a CDS entity. The endpoint should trigger an event or message that initiates the CPI processing later.
CPI iFlow skeleton (HTTP > Content Modifier > Script)	Design a basic CPI iFlow with an HTTP trigger, a Content Modifier step to prepare the payload, and a Script step that echoes the payload for testing purposes. This will later be expanded to connect to Google’s API.
Spike demo & retrospective	Test the complete flow from uploading the file in the CAP frontend to receiving the payload back from the CPI flow. Document the working components and any issues faced. Summarize what was achieved and plan the scope of the upcoming week.
Build UI5 front-end to upload file	Create UI5 frontend
Groovy in CPI: build dynamic Google queries & handle pagination	Enhance the CPI iFlow to dynamically construct and call Google’s Custom Search API for each keyword. Support pagination by looping through result pages when more than 10 results are available. Parse the JSON response and extract relevant data such as title, link, and snippet.
Implement domain exclusion filter in Groovy	Extend the Groovy script in the CPI flow to exclude any domains listed in the input file. Perform validation to ensure no excluded domains appear in the final result set. Prepare a unit test that covers common cases.
Aggregator sub‑process: loop keywords & build cumulative JSON	Create a subprocess or loop within the CPI iFlow that handles multiple keywords from the input payload. For each keyword, perform the search, apply domain filtering, and collect the results in a structured format such as a JSON array.
Generate Excel with Apache POI in CPI	Add functionality in the CPI flow to generate a well-formatted Excel (.xlsx) report using Apache POI or an equivalent library. Each keyword should have its own section or worksheet, and columns should be auto-sized for readability.
Checkpoint demo & feedback	Integrate the Excel generation into the existing flow and validate that the file is created and returned to the CAP backend. Store the resulting file and verify it can be downloaded from the CAP application. Conduct a demo to show the current state.
Configure CPI Mail adapter + Excel attachment	Configure the Mail adapter in CPI to send the generated Excel report to a target email address. Attach the file to the email and ensure it can be opened properly by the recipient. Use a test inbox to confirm delivery.
Add error handling & retry logic	Implement error handling in the CPI flow to gracefully manage cases such as API failures, timeouts, or malformed inputs. Add retry logic with exponential backoff for transient issues. Ensure the flow fails transparently with clear error messages.
Secure credentials; CAP ↔ CPI destination & OAuth	Securely store all sensitive credentials such as the Google API key in the CPI tenant using the Secure Parameter feature. Configure a destination in BTP for secure communication between CAP and CPI using OAuth tokens instead of basic authentication.
Performance tuning & parallelisation	Run a performance test using a batch of up to 200 keywords. Monitor the response time and memory usage of the CPI flow. Optimize any inefficient steps or loops to ensure the total processing time stays under 60 seconds.
Full dry‑run on staging	Conduct a full dry-run simulation of the end-to-end process using test data. Validate every component, from file upload to final email delivery. Ensure data accuracy and formatting are correct. Gather notes for improvements.
UI5 admin dashboard & XSUAA roles	Develop a simple UI5 dashboard within the CAP app to display past keyword analysis runs. Include details such as timestamp, number of keywords processed, and status (success/failure). Provide download links to previous reports.
Polish UI & CAP logic, bug fixes	Polish the frontend user experience and ensure the backend handles all edge cases. Fix any known bugs in the CAP logic or CPI flow and prepare the system for stakeholder testing.
Architecture & user docs	Prepare technical documentation including architecture diagrams, flow charts, and descriptions of each component. Write a short user guide for marketing, including how to upload a file and retrieve results.
Demo rehearsal & QA	Rehearse a full demo of the solution. Practice explaining the flow, demonstrating the upload and result process, and answering anticipated questions. Adjust the UI or flow logic if necessary for clarity.
Go‑Live simulation & retrospective	Simulate a go-live by triggering a real run with realistic data. Send the Excel report to the official marketing inbox. Collect and process feedback, then create a backlog for future enhancements (e.g., trend tracking, visual insights, scheduled reports).